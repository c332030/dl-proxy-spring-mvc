
def ext = rootProject.ext
def versions = ext.versions

buildscript {

  apply from: 'config.gradle'

  repositories {
    maven {
      url 'https://nexus.local.c332030.com/repository/maven-public/'
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${versions.spring_boot}" as Object)
  }
}

subprojects {

  apply plugin: 'java-library'
  apply plugin: 'maven-publish'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  group= rootProject.ext.group
  version= rootProject.ext.version

  sourceCompatibility= JavaVersion.VERSION_11
  targetCompatibility= JavaVersion.VERSION_11

  [compileJava, compileTestJava, javadoc]*.options*.encoding = rootProject.ext.charset

  jar.enabled = true

  java {
    withJavadocJar()
    withSourcesJar()
  }

  repositories {
    maven {
      url 'https://nexus.local.c332030.com/repository/maven-public/'
    }
  }

  configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
  }

  dependencies {

    implementation 'org.springframework.boot:spring-boot-starter'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jetty'

    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // lombok
    // compileOnly group: "org.projectlombok", name: "lombok", version: versions.lombok
    compileOnly group: "org.projectlombok", name: "lombok"
    annotationProcessor group: "org.projectlombok", name: "lombok"

    testCompileOnly group: "org.projectlombok", name: "lombok"
    testAnnotationProcessor group: "org.projectlombok", name: "lombok"

    testImplementation group: "junit", name: "junit"

    implementation group: "com.c332030.commons", name: "c-commons-util", version: versions.c_commons_java

    implementation group: 'com.c332030.spring', name: 'c-spring-app-web', version: versions.c_commons_spring

  }

  // 实时更新 snapshots
  configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
    resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
  }


  // 避免 mapper xml 未复制到 classes 目录
  sourceSets {
    //noinspection GroovyAssignabilityCheck
    main {
      //noinspection GroovyAssignabilityCheck
      resources {
        //可以将java目录下的所有非.java资源打包到classes下
        srcDir 'src/main/java'
      }
    }
  }


// 测试配置
  test {
    // include '**/Test*.class'

    exclude '**/*Test*.class'
  }

// 将依赖包复制到lib目录
  task copyJar(type: Copy) {
    // delete "$buildDir/libs/lib"
    from configurations.runtimeClasspath
    into "$buildDir/libs/lib"
  }

// 拷贝配置文件
  task copyConfigFile(type: Copy) {
    // delete "$buildDir/libs/config"
    from('src/main/resources')
    into "$buildDir/libs/config"
  }

  bootJar {

    archiveName = 'boot.jar'

    // 以 shell 脚本方式运行
    // launchScript {
    //   properties 'logFilename': "${project.name}.log'"
    // }

    dependsOn copyJar
    dependsOn copyConfigFile

    excludes = ['*.jar', '*.yml', '*.properties']

    manifest {
      attributes "Manifest-Version": 1.0,
        'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
  }

}
